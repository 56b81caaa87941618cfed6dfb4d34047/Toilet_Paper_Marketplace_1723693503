{
    "id": "echarts_bar_chart_1724445457",
    "name": "echarts-bar-chart",
    "type": "containerComponent",
    "metadata": {
        "markdownText": "<!--\nTo add this component to the user's app, you are required to follow all three of these steps:\n1. In the html file, include `<echarts-bar-chart></echarts-bar-chart>` in the place where the chart needs to be inserted. Keep blank lines before and after this code. Do not remove the other components!\n2. In the html file's <head> section, import the JS file for this component `./components/echarts-bar-chart.js`. You are strictly required to **NOT** remove anything else. Keep blank lines before and after this code. Do not remove the other component imports!\n3. You are given the correct SQL statement -- replace the `PLACEHOLDER_SQL_STATEMENT` variable in this file with the actual SQL statement.\n-->\n\n<template>\n  <div style=\"display: flex; justify-content: center;\">\n    <div id=\"bar-chart\" style=\"width: 100%; height: 50vh;\"></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"EchartsBarChart\",\n  data() {\n    return {\n      tableItems: [],\n      tableHeaders: [],\n      SQL_statement: 'PLACEHOLDER_SQL_STATEMENT', // Ensure to replace this placeholder with the actual SQL statement\n    };\n  },\n  mounted() {\n    this.fetch_data_from_database(this.SQL_statement)\n      .then(([tableHeaders, tableItems]) => {\n        this.tableHeaders = tableHeaders;\n        this.tableItems = tableItems;\n        this.prepare_data_for_bar_chart(tableHeaders, tableItems)\n          .then(chartData => {\n            this.render_bar_chart(chartData);\n          });\n      });\n  },\n  methods: {\n    // start fetch_data_from_database() method\n    fetch_data_from_database(SQL_statement) {\n      return axios.post('https://nl2sql-prod.azurewebsites.net/execute_sql', { query: SQL_statement })\n        .then(response => {\n          const tableItems = response.data.result;\n          if (tableItems.length > 0) {\n            const tableHeaders = Object.keys(tableItems[0]);\n            this.tableItems = tableItems;\n            this.tableHeaders = tableHeaders;\n            return [tableHeaders, tableItems];\n          }\n        });\n    },\n    // end fetch_data_from_database() method\n\n    // start prepare_data_for_bar_chart() method\n    prepare_data_for_bar_chart(tableHeaders, tableItems) {\n      return new Promise((resolve, reject) => {\n        let xAxisData = [];\n        let seriesData = [];\n        let xAxisCandidate = null;\n        let yAxisCandidate = null;\n\n        for (let header of tableHeaders) {\n          let hasNonEmptyStringValues = tableItems.some(item =>\n            typeof item[header] === \"string\" &&\n            item[header] !== \"\" &&\n            !item[header].startsWith('{') &&\n            !item[header].startsWith('(') &&\n            !item[header].startsWith('[')\n          );\n          if (hasNonEmptyStringValues) {\n            xAxisCandidate = header;\n            console.log('X-axis candidate:', xAxisCandidate);\n            break;\n          }\n        }\n\n        if (!xAxisCandidate) {\n          console.log('Unable to find suitable X-axis data. Returning empty chart data.');\n          resolve({ xAxisData: [], seriesData: [], xAxisCandidate: null, yAxisCandidate: null });\n          return;\n        }\n\n        xAxisData = tableItems.map(item => {\n          let value = item[xAxisCandidate];\n          if (typeof value === \"string\" && !value.startsWith('{')) {\n            return value;\n          } else {\n            console.log(`Skipping value \"${value}\" for X-axis data.`);\n            return null;\n          }\n        }).filter(value => value !== null);\n\n        for (let header of tableHeaders) {\n          if (header !== xAxisCandidate && yAxisCandidate === null) {\n            let hasNumericOrParsableValues = tableItems.some(item => {\n              let value = item[header];\n              return typeof value === \"number\" || \n                     (typeof value === \"string\" && !isNaN(parseFloat(value)) && !value.startsWith('0x'));\n            });\n            if (hasNumericOrParsableValues) {\n              yAxisCandidate = header;\n              console.log('Y Axis Candidate: ', yAxisCandidate);\n              break;\n            }\n          }\n        }\n\n        if (!yAxisCandidate) {\n          console.log('Unable to find suitable Y-axis data. Returning empty chart data.');\n          resolve({ xAxisData: [], seriesData: [], xAxisCandidate: null, yAxisCandidate: null });\n          return;\n        }\n\n        for (let header of tableHeaders) {\n          if (header !== xAxisCandidate && header === yAxisCandidate) {\n            let series = { name: header, type: 'bar', data: [] };\n\n            for (let item of tableItems) {\n              let yValue = item[header];\n              if (typeof yValue === \"number\") {\n                series.data.push(yValue);\n                console.log(`Adding numeric value ${yValue} to series data.`);\n              } else if (typeof yValue === \"string\" && !isNaN(parseFloat(yValue)) && !yValue.startsWith('0x')) {\n                let parsedValue = parseFloat(yValue);\n                series.data.push(parsedValue);\n                console.log(`Adding parsed value ${parsedValue} to series data.`);\n              } else {\n                console.log(`Skipping value ${yValue} for series data.`);\n              }\n            }\n\n            seriesData.push(series);\n          }\n        }\n\n        resolve({ xAxisData, seriesData, xAxisCandidate, yAxisCandidate });\n      });\n    },\n    // end prepare_data_for_bar_chart() method\n\n    // start render_bar_chart() method\n    render_bar_chart(chartData) {\n      let barChart = echarts.init(document.getElementById('bar-chart'), 'dark');\n\n      let option = {\n        grid: { containLabel: true },\n        xAxis: {\n          type: 'category',\n          data: chartData.xAxisData,\n          name: chartData.xAxisCandidate,\n          nameLocation: 'center',\n          axisLabel: { margin: 60 }\n        },\n        yAxis: {\n          type: 'value',\n          name: chartData.yAxisCandidate,\n          nameLocation: 'middle',\n          axisLabel: { margin: 60 }\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: { type: 'shadow' }\n        },\n        series: chartData.seriesData\n      };\n\n      barChart.setOption(option);\n    }\n    // end render_bar_chart() method\n  }\n};\n</script>\n\n<style scoped>\n/* You can include additional styles here */\n</style>\n"
    },
    "w": 12,
    "h": 17,
    "x": 0,
    "y": 118,
    "i": "21",
    "minW": 3,
    "maxW": 12,
    "minH": 1,
    "moved": false,
    "static": false,
    "isDraggable": true,
    "isResizable": true
}