{
    "id": "echarts_pie_chart_1724444084",
    "name": "echarts_pie_chart",
    "type": "containerComponent",
    "metadata": {
        "markdownText": "<template>\n    <div style=\"display: flex; justify-content: center;\">\n        <div id=\"pie-chart\" style=\"width: 100vw; height: 50vh;\"></div>\n    </div>\n</template>\n\n<script>\n// To add this component to the user's app, you must follow all three of these steps:\n// 1. In the html file, include `<echarts-pie-chart></echarts-pie-chart>` in the place where the chart needs to be inserted. Keep blank lines before and after this code. Do not remove the other components!\n// 2. In the html file's <head> section, import the JS file for this component `./components/echarts-pie-chart.js`. You are strictly required to **NOT** remove anything else. Keep blank lines before and after this code. Do not remove the other component imports!\n// 3. You are given the correct SQL statement -- replace the `PLACEHOLDER_SQL_STATEMENT` variable in this file with the actual SQL statement.\n\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            // 1. First, rename the data variables as per the user's query request, and insert them in the user's app.\n            tableItems: [],\n            tableHeaders: [],\n            SQL_statement: 'PLACEHOLDER_SQL_STATEMENT',\n        };\n    },\n\n    mounted() {\n        // 2. Then you are required to simply add this line of code, assigning values to your data variables. Do not declare a new method for this.\n        this.fetch_data_from_database(this.SQL_statement)\n            .then(([tableHeaders, tableItems]) => {\n                this.tableHeaders = tableHeaders;\n                this.tableItems = tableItems;\n                this.prepare_data_for_pie_chart(tableHeaders, tableItems)\n                    .then(chartData => {\n                        this.render_pie_chart(chartData);\n                    });\n            });\n    },\n\n    methods: {\n        // start fetch_data_from_database() method\n        fetch_data_from_database(SQL_statement) {\n            return axios.post('https://nl2sql-prod.azurewebsites.net/execute_sql', {query: SQL_statement})\n                .then(response => {\n                    const tableItems = response.data.result;\n                    if (tableItems.length > 0){\n                        const tableHeaders = Object.keys(tableItems[0])\n                        this.tableItems = tableItems;\n                        this.tableHeaders = tableHeaders;\n                        return [tableHeaders, tableItems];\n                    }\n                });\n        },\n        // end fetch_data_from_database() method\n\n        // start prepare_data_for_pie_chart() method\n        prepare_data_for_pie_chart(tableHeaders, tableItems) {\n            return new Promise((resolve, reject) => {\n                let seriesData = [];\n                let xAxisCandidate = null;\n                let yAxisCandidate = null;\n\n                for (let header of tableHeaders) {\n                    let hasNonEmptyStringValues = tableItems.some(item => typeof item[header] === \"string\" && item[header] !== \"\" && !item[header].startsWith('{') && !item[header].startsWith('(') && !item[header].startsWith('['));\n                    if (hasNonEmptyStringValues) {\n                        xAxisCandidate = header;\n                        console.log('X-axis candidate:', xAxisCandidate);\n                        break;\n                    }\n                }\n\n                if (!xAxisCandidate) {\n                    console.log('Unable to find suitable X-axis data. Returning empty chart data.');\n                    resolve({ seriesData: [], xAxisCandidate: null, yAxisCandidate: null });\n                }\n\n                for (let header of tableHeaders) {\n                    if (header !== xAxisCandidate && yAxisCandidate === null) {\n                        let hasNumericOrParsableValues = tableItems.some(item => {\n                            let value = item[header];\n                            return typeof value === \"number\" || (typeof value === \"string\" && !isNaN(parseFloat(value)) && !value.startsWith('0x'));\n                        });\n                        if (hasNumericOrParsableValues) {\n                            yAxisCandidate = header;\n                            console.log('Y Axis Candidate: ', yAxisCandidate);\n                            break;\n                        }\n                    }\n                }\n\n                if (!yAxisCandidate) {\n                    console.log('Unable to find suitable Y-axis data. Returning empty chart data.');\n                    resolve({ seriesData: [], xAxisCandidate: null, yAxisCandidate: null });\n                }\n\n                for (let header of tableHeaders) {\n                    if (header !== xAxisCandidate && header === yAxisCandidate) {\n                        let series = { name: header, type: 'pie', data: [] };\n\n                        for (let item of tableItems) {\n                            let yValue = item[header];\n                            if (typeof yValue === \"number\") {\n                                series.data.push({ value: yValue, name: item[xAxisCandidate] });\n                                console.log(`Adding numeric value ${yValue} to series data.`);\n                            } else if (typeof yValue === \"string\" && !isNaN(parseFloat(yValue)) && !yValue.startsWith('0x')) {\n                                let parsedValue = parseFloat(yValue);\n                                series.data.push({ value: parsedValue, name: item[xAxisCandidate] });\n                                console.log(`Adding parsed value ${parsedValue} to series data.`);\n                            } else {\n                                console.log(`Skipping value ${yValue} for series data.`);\n                            }\n                        }\n\n                        seriesData.push(series);\n                    }\n                }\n\n                resolve({ seriesData, xAxisCandidate, yAxisCandidate });\n            });\n        },\n        // end prepare_data_for_pie_chart() method\n\n        // start render_pie_chart() method\n        render_pie_chart(chartData) {\n            let pieChart = echarts.init(document.getElementById('pie-chart'), 'dark');\n\n            let option = {\n                tooltip: { trigger: 'item' },\n                legend: { orient: 'vertical', left: '1%', top: '20%', itemGap: 10, textStyle: { color: '#fff'} },\n                series: chartData.seriesData\n            };\n\n            pieChart.setOption(option);\n        },\n        //end render_pie_chart() method\n    }\n};\n</script>\n\n<style scoped>\n</style>"
    },
    "w": 7,
    "h": 7,
    "x": 0,
    "y": 39,
    "i": "11",
    "minW": 3,
    "maxW": 12,
    "minH": 1,
    "moved": false,
    "static": false,
    "isDraggable": true,
    "isResizable": true
}